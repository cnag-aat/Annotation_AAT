#!/usr/bin/env python
import os
import json
import argparse
import sys

#Author: Jessica Gomez-Garrido, CNAG-CRG.
#Contact email: jessica.gomez@cnag.crg.eu
#Date:11172019

class CreateConfigurationFile(object):
    """Class which manages Configuration file Manager"""
      
    def __init__(self):
        """Class constructor"""
        #GENERAL PARAMETERS
        self.configFile = "Annotation.config"	           #Name of the json configuration file with the pipeline parameters to be created
        self.specFile = "Annotation.spec"                  #Name of the spec file to be created
        self.base_name = None                              #Assembly base_name        
        self.run_augustus = True                           #By default run augustus step
        self.run_augustus_hints = True                     #By default run augustus with hints step
        self.run_geneid = True                             #By default run geneid step
        self.run_geneid_introns = True                     #By default run geneid with introns step
        self.run_genemark = True                           #By default run genemark step
        self.run_genemark_ET = True                        #By default run genemark-ET step
        self.run_miniprot = True                           #By default run miniprot step
        self.run_pasa = True                               #By default run pasa step
        self.run_transdecoder = True                       #By default run transdecoder step
        self.run_EVM = True                                #By default run EVM 
        self.run_update = True                             #By default run the Pasa Update step
        self.run_non_coding = True                         #By default run non_coding step
        self.get_Jbrowse = True                            #By default run get JBrowse step

        #ALL SPEC PARAMETERS
        self.all_qos = "test"
        self.all_time = "00:05:00"
        self.all_queue = "genD"

        #INPUT PARAMETERS
        self.scripts_dir = os.path.dirname(sys.argv[0]) + "/../scripts/"                          #Directory with the different scripts for the pipeline
        self.genome = None	                               #Path to the genome assembly in fasta format.
        self.genome_masked = None	                       #Path to the masked genome assembly in fasta format.
        self.junctions = None                              #Path to the junctions gff file to run gene predictors with introns.
        self.geneid_parameters = None	   #Path to the geneid parameters file. For geneid, geneid with introns and framefixing (part of annotation update) steps.
        self.proteins = None                               #Path to the fasta with protein evidence.
        self.pasa_config = None                            #Path to the Pasa configuration file.
        self.trans_gtf = None 				   #Path to the transcript models generated by Stringtie or Cufflinks
        self.transcripts = None                            #Path to the fasta with transcript evidence.
        self.update_config = None                          #Path to the Pasa configuration file for the annotation update step.
        self.glen = None                                #Path to the assembly.genome file
        self.RM_gff = None                                 #Path to the Repeat Masker gff output.

        #OUTPUT PARAMETERS
        self.annotation_step = "3"	#Step of the annotation pipeline in the annotation process.    
        self.annotation_version = "01"	#Version of the annotation process.
        self.pipeline_workdir = os.getcwd() + "/"                                                 #Base directory for the pipeline run      
        self.output_dir = self.pipeline_workdir +  "step0" + self.annotation_step + "_annotation_pipeline.V" + self.annotation_version	#Directory to keep the outputs of the first annotation steps. 
        self.EVM_dir = "step0" + str(int(self.annotation_step) + 1) + "_EVM.V" + self.annotation_version	#Directory to keep the files for the EVM step
        self.dir_masked_chunks = self.output_dir + "/chunks_masked_reference/"	#Directory to keep the chunks of the masked genome

        self.dir_genome_chunks = self.output_dir + "/chunks_genome_reference/"	#Directory to keep the chunks of the genome
        self.augustus_prediction = self.output_dir + "/gene_predictions/augustus/augustus_gene_prediction.gff3"  #Output file for the augustus predictions.
        self.augustus_preEVM = self.output_dir + "/gene_predictions/augustus/augustus_preEVM.gff3"  #Output file for the augustus predictions converted for EVM.
        
        self.augustus_hints_prediction = self.output_dir + "/gene_predictions/augustus_hints/augustus_hints_gene_prediction.gff3"  #Output file for the augustus with hints predictions.
        self.augustus_hints_preEVM = self.output_dir + "/gene_predictions/augustus_hints/augustus_hints_preEVM.gff3"  #Output file for the augustus with hints predictions converted for EVM.
        self.geneid_prediction = self.output_dir + "/gene_predictions/geneid/geneid_gene_prediction.gff3"  #Output file for the geneid predictions.
        self.geneid_preEVM = self.output_dir + "/gene_predictions/geneid/geneid_preEVM.gff3"  #Output file for the geneid predictions converted for EVM.
        self.geneid_introns_prediction = self.output_dir + "/gene_predictions/geneid_with_introns/geneid_introns_gene_prediction.gff3"  #Output file for the geneid with introns predictions.
        self.geneid_introns_preEVM = self.output_dir + "/gene_predictions/geneid_with_introns/geneid_introns_preEVM.gff3"  #Output file for the geneid with introns predictions converted for EVM.
        self.genemark_prediction = self.output_dir + "/gene_predictions/genemark.gtf"  #Output file for the genemark predictions.
        self.genemark_preEVM = self.output_dir + "/gene_predictions/genemark_preEVM.gff3"  #Output file for the genemark predictions converted for EVM.
        self.genemark_ET_prediction = self.output_dir + "/gene_predictions/genemark-ET.gtf"  #Output file for the genemark-ET predictions.
        self.genemark_ET_preEVM = self.output_dir + "/gene_predictions/genemark-ET_preEVM.gff3"  #Output file for the genemark-ET predictions converted for EVM.
        self.miniprot_cds =  self.output_dir + "/protein_and_transcript_mappings/miniprot/proteins_miniprot_cds.gff3" #Output file for the miniprot output in a cds gff3 format.
        self.miniprot_gene =  self.output_dir + "/protein_and_transcript_mappings/miniprot/proteins_miniprot_gene.gff3"    #Output file for the miniprot output in a gene gff3 format.
        self.pasa_dir =  self.output_dir + "/protein_and_transcript_mappings/pasa/"     #Directory to keep all the pasa outputs.   
        self.evm_out = self.EVM_dir + "/evm.best.gff3"                                  #File with the final EVM models
        self.update_dir = "step0" + str(int(self.annotation_step) + 2) + "_annotation_update.V" + self.annotation_version  + "/"   #Directory to keep the files for annotation update step.
        self.ncRNA_annotation_dir = "step0" + str(int(self.annotation_step) + 3) + "_ncRNA_annotation.V" + self.annotation_version  + "/"   #Directory to keep the files of the ncRNA annotation step.
        self.out_cmsearch = self.ncRNA_annotation_dir + "/cmsearch.tbl"         #Output file to keep the cmsearch results
        self.out_tRNAscan = self.ncRNA_annotation_dir + "/tRNAscan-SE/tRNAscan.out"    # Output file to keep the tRNAscan-SE results.

        #CHUNKS PARAMETERS
        self.masked_chunks = "50"	#Number of chunks of the masked genome for parallelizing some gene predictors run.

        self.genome_chunks = "1"	#Number of chunks of the genome for parallelizing tRNAscanSE.
        self.protein_chunks = "20"	#Number of chunks to split the protein files for running blast and classify the lncRNAs. 

        #GETCHUNKS SPEC PARAMETERS
        self.chunks_qos = "test"
        self.chunks_time = "00:10:00"
        self.chunks_queue = "genD"
        self.chunks_mem = "10G"

        #GET CODING JUNCTIONS SPEC PARAMETERS
        self.codingHints_qos = "short"
        self.codingHints_time = "01:00:00"
        self.codingHints_queue = "genD"
        self.codingHints_mem = "1000"

        #AUGUSTUS PARAMETERS
        self.aug_species = None	#Species name to run augustus with its trained parameters. For augustus and augustus with hints steps.
        self.aug_alternatives_from_evidence = "true"	#Report alternative transcripts when they are suggested by hints.
        self.aug_alternatives_from_sampling = "true"	#Report alternative transcripts generated through probabilistic sampling.
        self.aug_uniqueGeneId = "true"	#If true, output gene identifyers like this: seqname.gN. For augustus and augustus with hints.  
        self.aug_gff3 = "on"	#Output in gff3 format. For augustus and augustus with hints.
        self.aug_sample = 60	#For augustus and augustus with hints.
        self.aug_noInFrameStop = "true"	#Do not report transcripts with in-frame stop codons. Otherwise, intron-spanning stop codons could occur. For augustus and augustus with hints.
        self.aug_maxtracks = 2	#Maximum number of tracks allowed. For augustus and augustus with hints.
        self.aug_singlestrand = "false"	#Predict genes independently on each strand, allow overlapping genes on opposite strands. For augustus and augustus with hints.
        self.aug_strand= "both"	#For augustus and augustus with hints.
        self.aug_min_intron_len= 30	#Minimum predicted intron length. For augustus and augustus with hints.                         
        self.augustus_weights = [2, 2, 1]	#Weights given to augustus predictions when running EVM.
        self.additional_augustus_options = None	#Additional augustus options to run it, see augustus help for more information.

        #AUGUSTUS SPEC PARAMETERS
        self.augustus_qos = "normal"
        self.augustus_time = "10:00:00"
        self.augustus_queue = "genD"
        self.augustus_mem = "5G"

        #AUGUSTUS hints PARAMETERS
        self.extrinsic_file_augustus_hints = "/software/assembly/conda/augustus3.5.0/config/extrinsic/extrinsic.E.cfg"          #Extrinsic file to use when running augustus with hints. For more information read augustus documentation.
        self.augustus_hints_weights = [3,3,3]            #Weights given to augustus with intron predictions when running EVM.
        self.additional_augustus_hints_options = None    #Additional augustus options to run augustus with hints, see augustus help for more information.

        #AUGUSTUS hints SPEC PARAMETERS
        self.augustus_hints_qos = "long"
        self.augustus_hints_time = "24:00:00"
        self.augustus_hints_queue = "genD"
        self.augustus_hints_mem = "5G"

        #GENEID PARAMETERS
        self.geneid_path = "/software/assembly/src/geneid/"
        self.geneid_weights = [2,1,2]                      #Weights given to geneid predictions when running EVM.
        self.geneid_options = " -3U "                        #Desired geneid options to run it, see geneid documentation for more information.

        #GENEID SPEC PARAMETERS
        self.geneid_qos = "short"
        self.geneid_time = "1:00:00"
        self.geneid_queue = "genD"
        self.geneid_mem = "15G"

        #GENEID INTRONS PARAMETERS
        self.geneid_introns_weights = [3,3,3]                #Weights given to geneid with intron predictions when running EVM.
        self.geneid_introns_options = " -3nU"                #Desired geneid options to run geneid with introns, see geneid documentation for more information.

        #GENEID INTRONS SPEC PARAMETERS
        self.geneid_introns_qos = "short"
        self.geneid_introns_time = "3:00:00"
        self.geneid_introns_queue = "genD"
        self.geneid_introns_mem = "50G"

       #GENEMARK PARAMETERS
        self.gmk_min_contig = 50000                        #Will ignore contigs shorter then min_contig in training
        self.gmk_max_contig = 5000000                      #will split input genomic sequence into contigs shorter than max_contig.
        self.gmk_max_gap = 5000                            #Will split sequence at gaps longer than max_gap. Letters 'n' and 'N' are       interpreted as standing within gaps 
        self.gmk_cores = 24                                #Number of threads for running genemark. 
        self.additional_genemark_options = None            #Additional genemark options to run it, see genemark documentation for more information.
        self.genemark_weights = [1, 1, 1]                  #Weights given to genemark predictions when running EVM.

        #GENEMARK SPEC PARAMETERS
        self.genemark_qos = "normal"
        self.genemark_time = "12:00:00"
        self.genemark_queue = "genD"
        self.genemark_mem = "20G"        

        #GENEMARK-ET PARAMETERS
        self.genemark_ET_weights = [3,3,3]                 #Weights given to augustus with intron predictions when running EVM.
        self.additional_genemark_ET_options = None         #Additional genemark-ET options to run it, see genemark documentation for more information.

        #MINIPROT PARAMETERS
        self.miniprot_path = "/software/assembly/src/miniprot/miniprot/"    ##path to miniprot installation
        self.miniprot_cores = 8                               #Number of threads.
        self.miniprot_weights = [10, 8, 10]                   #Weights given to miniprot mappings when running EVM.
        self.additional_miniprot_options = None               #Additional miniprot options to run it, see miniprot help for more information.

        #GENEMARK ET SPEC PARAMETERS
        self.genemark_et_qos = "normal"
        self.genemark_et_time = "12:00:00"
        self.genemark_et_queue = "genD"
        self.genemark_et_mem = "50G"    

        #MINIPROT SPEC PARAMETERS
        self.miniprot_qos = "normal"
        self.miniprot_time = "10:00:00"
        self.miniprot_queue = "genD"
        self.miniprot_mem = "20G" 

        #PASA PARAMETERS
        self.pasa_cores = 1                               #Number of pasa_CPUs to run Pasa.
        self.pasadb = None                                 #Name of the pasa database, it must coincide with the name given in pasa-config.
        self.pasa_weights = [8, 10, 8]                     #Weights given to pasa mappings when running EVM.
        self.create_database = False                       #By default do not create pasa database.
        self.aligners = 'gmap'                             #Program to use to align the transcripts     
        self.add_option = None                             #Option used to add extra options for PASA

        #PASA SPEC PARAMETERS
        self.PASA_qos = "long"
        self.PASA_time = "16:05:00"
        self.PASA_queue = "genD"
        self.PASA_mem = "20G"       

        #TRANSDECODER PARAMETERS
        self.transdecoder_weights = [3, 2, 3]              #Weights given to the pasa transdecoder output gff3 file.

        #TRANSDECODER SPEC PARAMETERS
        self.transdecoder_qos = "normal"
        self.transdecoder_time = "10:00:00"
        self.transdecoder_queue = "genD"
        self.transdecoder_mem = "10G"  

        #EVM PARAMETERS
        self.evm_path = "/scratch/project/devel/aateam/src/EVidenceModeler-1.1.1/"              #Path to the EVM software installation
        self.evm_segmentsize = 2000000                                                  #Size of the genome partitions for EVM
        self.evm_overlapsize = 1000000                                                  #Size of the overlap between the different EVM partitions
        self.evm_cores = 24                                                             #Number of threads to run EVM 
        self.additional_evm_options = None	#Additional augustus options to run it, see evm help for more information.

        #MERGEGFF SPEC PARAMETERS
        self.mergegff_qos = "test"
        self.mergegff_time = "00:05:00"
        self.mergegff_queue = "genD"
        self.mergegff_mem = "100"

        #PRED4EVM SPEC PARAMETERS
        self.pred4evm_qos = "test"
        self.pred4evm_time = "00:10:00"
        self.pred4evm_queue = "genD"
        self.pred4evm_mem = "1000"

        #PREPARE EVM SPEC PARAMETERS
        self.prepevm_qos = "test"
        self.prepevm_time = "00:10:00"
        self.prepevm_queue = "genD"
        self.prepevm_mem = "1000"

        #EVM SPEC PARAMETERS
        self.evm_qos = "long"
        self.evm_time = "24:00:00"
        self.evm_queue = "genD"
        self.evm_mem = "30G"

        #SELECT EVM SPEC PARAMETERS
        self.selectevm_qos = "short"
        self.selectevm_time = "01:00:00"
        self.selectevm_queue = "genD"
        self.selectevm_mem = "1000"

        #PASA UPDATE PARAMETERS
        self.project_name = None                           #Name of the project and version, to give the names to the final annotation output. 
        self.update_rounds = 2                             #Number of rounds of PASA Updates to run

        #PASA UPDATE SPEC PARAMETERS
        self.pasaupdate_qos = "long"
        self.pasaupdate_time = "24:00:00"
        self.pasaupdate_queue = "genD"
        self.pasaupdate_mem = "15G"

        #PROCESS UPDATE SPEC PARAMETERS
        self.processupdate_qos = "normal"
        self.processupdate_time = "3:00:00"
        self.processupdate_queue = "genD"
        self.processupdate_mem = "5G"       

        #ncRNA ANNOTATION PARAMETERS
        self.ncRNA_version = "A"                           #Version for the non-coding RNA annotation
        self.cmsearch_CPUs = 16                            #Number of CPUs to run cmsearch
        self.Rfam = "/scratch/devel/jgomez/RFAM_db/290721/Rfam.cm"    #CM file with the Rfam library.
        self.blast_threads = 4                             #Number of threads to run blast

        #CMSEARCH SPEC PARAMETERS
        self.cmsearch_qos = "vlong"
        self.cmsearch_time = "48:00:00"
        self.cmsearch_queue = "genD"
        self.cmsearch_mem = "100G"


        #tRNAScan SPEC PARAMETERS
        self.tRNAscan_qos = "normal"
        self.tRNAscan_time = "6:00:00"
        self.tRNAscan_queue = "genD"
        self.tRNAscan_mem = "5G"

        #lncRNA SPEC PARAMETERS
        self.lncRNA_qos = "short"
        self.lncRNA_time = "0:30:00"
        self.lncRNA_queue = "genD"
        self.lncRNA_mem = "10G"        

        #BLAST PROT SPEC PARAMETERS
        self.blast_prot_qos = "normal"
        self.blast_prot_time = "3:30:00"
        self.blast_prot_queue = "genD"
        self.blast_prot_mem = "10G"

        #ncRNA SPEC PARAMETERS
        self.ncRNA_qos = "short"
        self.ncRNA_time = "0:30:00"
        self.ncRNA_queue = "genD"
        self.ncRNA_mem = "10G"  

        #get_GC SPEC PARAMETERS
        self.getGC_qos= "short"
        self.getGC_time = "3:00:00"
        self.getGC_queue = "genD"
        self.getGC_mem = "100G"
        
        #get_seq SPEC PARAMETERS
        self.getseq_qos= "short"
        self.getseq_time = "3:00:00"
        self.getseq_queue = "genD"
        self.getseq_mem = "10G"

        #get_tracks SPEC PARAMETERS
        self.gettracks_qos= "vshort"
        self.gettracks_time = "1:00:00"
        self.gettracks_queue = "genD"
        self.gettracks_mem = "10G"

        #get_tar SPEC PARAMETERS
        self.gettar_qos= "short"
        self.gettar_time = "3:00:00"
        self.gettar_queue = "genD"
        self.gettar_mem = "10G"

###
        #DICTIONARIES
        self.allParameters = {}
        self.generalParameters = {}
        self.allSpecParameters = {}
        self.inputParameters = {}
        self.outputParameters = {}
        self.chunksParameters = {}
        self.chunksSpecParameters = {}
        self.codingHintsSpecParameters = {}
        self.augustusParameters = {}
        self.augustusSpecParameters = {}
        self.augustusArraySpecParameters = {}
        self.augustusHintsParameters = {}
        self.augustusHintsSpecParameters = {}
        self.augustusHintsArraySpecParameters = {}
        self.geneidParameters = {}
        self.geneidSpecParameters = {}
        self.geneidArraySpecParameters = {}
        self.geneidIntronsParameters = {}  
        self.geneidIntronsSpecParameters = {}
        self.geneidIntronsArraySpecParameters = {}
        self.genemarkParameters = {}
        self.genemarkSpecParameters = {}
        self.genemarkETParameters = {}
        self.genemarkETSpecParameters = {}
        self.miniprotParameters={}
        self.miniprotSpecParameters={}
        self.pasaSpecParameters={}
        self.pasaParameters={}
        self.transdecoderParameters = {}
        self.transdecoderSpecParameters={}
        self.mergegffSpecParameters = {}
        self.pred4evmSpecParameters = {}
        self.prepevmSpecParameters = {}
        self.evmSpecParameters = {}
        self.selectevmSpecParameters = {}
        self.evmParameters = {}
        self.updateParameters = {}
        self.pasaupdateSpecParameters = {}
        self.processupdateSpecParameters = {}
        self.ncRNAannotationParameters = {}
        self.cmsearchSpecParameters = {}
        self.tRNAscanSpecParameters = {}
        self.lncRNASpecParameters = {}
        self.BlastProtSpecParameters = {}
        self.ncRNASpecParameters = {}
        self.getGCSpecParameters = {}
        self.getseqSpecParameters = {}
        self.gettracksSpecParameters = {}
        self.gettarSpecParameters = {}

####

    def register_parameter(self, parser):
        """Register all parameters with the given
        argparse parser"""
        self.register_general(parser)
        self.register_input(parser)
        self.register_output(parser)
        self.register_chunks(parser)
        self.register_augustus(parser)
        self.register_augustus_hints(parser)
        self.register_geneid(parser)
        self.register_geneid_introns(parser)
        self.register_genemark(parser)
        self.register_genemark_ET(parser)
        self.register_miniprot(parser)
        self.register_pasa(parser)
        self.register_transdecoder(parser)
        self.register_evm(parser)
        self.register_update(parser)
        self.register_ncRNA_annotation(parser)

###

    def register_general(self, parser):
        """Register all general parameters with the given
        argparse parser

        parser -- the argparse parser
        """
        general_group = parser.add_argument_group('General Parameters')
        general_group.add_argument('--configFile', dest="configFile", metavar="configFile", default=self.configFile, help='Configuration file with the pipeline parameters to be created. Default %s' % self.configFile)
        general_group.add_argument('--specFile', dest="specFile", metavar="specFile", default=self.specFile, help='Cluster specifications JSON  fileto be generated. Default %s' % self.specFile)
        general_group.add_argument('--basename', dest="base_name", metavar="base_name", help='Assembly basename. Default %s' % self.base_name)
        general_group.add_argument('--no-augustus', dest="run_augustus", action="store_false", help='If specified, do not run augustus step.')

        general_group.add_argument('--no-augustus-hints', dest="run_augustus_hints", action="store_false", help='If specified, do not run augustus with hints step.')
       
        general_group.add_argument('--no-geneid', dest="run_geneid", action="store_false", help='If specified, do not run geneid step.')
        general_group.add_argument('--no-geneid-introns', dest="run_geneid_introns", action="store_false", help='If specified, do not run geneid with introns.')
        general_group.add_argument('--no-genemark', dest="run_genemark", action="store_false", help='If specified, do not run genemark step.')
        general_group.add_argument('--no-genemark-ET', dest="run_genemark_ET", action="store_false", help='If specified, do not run genemark-ET step.')
        general_group.add_argument('--no-miniprot', dest="run_miniprot", action="store_false", help='If specified, do not run miniprot step.')
        general_group.add_argument('--no-pasa', dest="run_pasa", action="store_false", help='If specified, do not run pasa step.')
        general_group.add_argument('--no-transdecoder', dest="run_transdecoder", action="store_false", help='If specified, do not run transdecoder step.')
        general_group.add_argument('--no-EVM', dest="run_EVM", action="store_false", help='If specified, do not run EVM step.')
        general_group.add_argument('--no-update', dest="run_update", action="store_false", help='If specified, do not run the annotation update step.')
        general_group.add_argument('--no-noncoding', dest="run_non_coding", action="store_false", help='If specified, do not run the non_coding annotation step.')
        general_group.add_argument('--no-jbrowse', dest="get_Jbrowse", action="store_false", help='If specified, do not run the get jbrowse tracks step.')


    def register_input(self, parser):
        """Register all input parameters with the given
        argparse parser

        parser -- the argparse parser
        """
        input_group = parser.add_argument_group('Inputs')
        input_group.add_argument('--scripts-dir', dest="scripts_dir", help='Directory with the different scripts for the pipeline. Default %s' % self.scripts_dir)
        input_group.add_argument('--genome', dest="genome", metavar="genome", help='Path to the genome assembly in fasta format.')
        input_group.add_argument('--glen', dest="glen", metavar="glen", help='Path to the assembly.genome file.')
        input_group.add_argument('--genome-masked', dest="genome_masked", metavar="genome_masked", help='Path to the masked genome assembly in fasta format.')
        input_group.add_argument('--junctions', dest="junctions", metavar="junctions", help='Path to the junctions gff file to run gene predictors with introns.')
        input_group.add_argument('--geneid-parameters', dest="geneid_parameters", metavar="geneid_parameters", help='Path to the geneid parameters file. For geneid, geneid with introns and framefixing (part of annotation update) steps.')
        input_group.add_argument('--proteins', dest="proteins", metavar="proteins", help='Path to the fasta with protein evidence.')
        input_group.add_argument('--transcripts', dest="transcripts", metavar="transcripts", help='Path to the fasta with transcript evidence.')
        input_group.add_argument('--pasa-config', dest="pasa_config", metavar="pasa_config", help='Path to the pasa configuration file.')
        input_group.add_argument('--trans-gtf', dest="trans_gtf", metavar="trans_gtf", help='Path to the fasta with transcript evidence.')
        input_group.add_argument('--update-config', dest="update_config", metavar="update_config", help='Path to the Pasa configuration file.')
        input_group.add_argument('--RM-gff', dest="RM_gff", metavar="RM_gff", help='Path to the Repeat Masker gff output.')

    def register_output(self, parser):
        """Register all output parameters with the given
        argparse parser

        parser -- the argparse parser
        """
        output_group = parser.add_argument_group('Outputs')
        output_group.add_argument('--annotation-step', dest="annotation_step", default=self.annotation_step, type=int, help='Step of the annotation pipeline in the annotation process. Default %s' % self.annotation_step)
        output_group.add_argument('--annotation-version', dest="annotation_version", default=self.annotation_version, help='Version of the annotation process. Default %s' % self.annotation_version)
        output_group.add_argument('--pipeline-workdir', dest="pipeline_workdir", default=self.pipeline_workdir, help='Base directory for the pipeline run. Default %s' % self.pipeline_workdir)
        output_group.add_argument('--output-dir', dest="output_dir", default=self.output_dir, help='Directory to keep the outputs of the first annotation steps.  Default %s' % self.output_dir)

        output_group.add_argument('--EVM-dir', dest="EVM_dir", help='Directory to keep the files for the EVM step. Default %s' % self.EVM_dir)
        output_group.add_argument('--dir-masked-chunks', dest="dir_masked_chunks", help='Directory to keep the chunks of the masked genome. Default %s' % self.dir_masked_chunks)
        output_group.add_argument('--dir-genome-chunks', dest="dir_genome_chunks", help='Directory to keep the chunks of the genome. Default %s' % self.dir_genome_chunks)
        output_group.add_argument('--augustus-prediction', dest="augustus_prediction",  help='Output file for the augustus predictions.  Default %s' % self.augustus_prediction)
        output_group.add_argument('--augustus-preEVM', dest="augustus_preEVM", help='Output file for the augustus predictions converted for EVM.  Default %s' % self.augustus_preEVM)
        output_group.add_argument('--augustus-hints-prediction', dest="augustus_hints_prediction",  help='Output file for the augustus with hints predictions.  Default %s' % self.augustus_hints_prediction)
        output_group.add_argument('--augustus-hints-preEVM', dest="augustus_hints_preEVM", help='Output file for the augustus with hints predictions converted for EVM.  Default %s' % self.augustus_hints_preEVM)
        output_group.add_argument('--geneid-prediction', dest="geneid_prediction", help='Output file for the geneid predictions.  Default %s' % self.geneid_prediction)
        output_group.add_argument('--geneid-preEVM', dest="geneid_preEVM", help='Output file for the geneid predictions converted for EVM.  Default %s' % self.geneid_preEVM)
        output_group.add_argument('--geneid-introns-prediction', dest="geneid_introns_prediction", help='Output file for the geneid with introns predictions.  Default %s' % self.geneid_introns_prediction)
        output_group.add_argument('--geneid-introns-preEVM', dest="geneid_introns_preEVM", help='Output file for the geneid with introns predictions converted for EVM.  Default %s' % self.geneid_introns_preEVM)
        output_group.add_argument('--genemark-prediction', dest="genemark_prediction", help='Output file for the genemark predictions.  Default %s' % self.genemark_prediction)
        output_group.add_argument('--genemark-preEVM', dest="genemark_preEVM", help='Output file for the genemark predictions converted for EVM.  Default %s' % self.genemark_preEVM)
        output_group.add_argument('--genemark-ET-prediction', dest="genemark_ET_prediction", help='Output file for the genemark-ET predictions.  Default %s' % self.genemark_ET_prediction)
        output_group.add_argument('--genemark-ET-preEVM', dest="genemark_ET_preEVM", help='Output file for the genemark-ET predictions converted for EVM.  Default %s' % self.genemark_ET_preEVM)
        output_group.add_argument('--miniprot-cds', dest="miniprot_cds", help='Output file for the miniprot output in a cds gff3 format.  Default %s' % self.miniprot_cds)
        output_group.add_argument('--miniprot-gene', dest="miniprot_gene", help='Output file for the miniprot output in a gene gff3 format.  Default %s' % self.miniprot_gene)
        output_group.add_argument('--pasa-dir', dest="pasa_dir", help='Directory to keep all the pasa outputs.  Default %s' % self.pasa_dir)
        output_group.add_argument('--evm-out', dest="evm_out", help='File with the final EVM models. Default %s' % self.evm_out)
        output_group.add_argument('--update-dir', dest="update_dir", help='Directory to keep the files for annotation update step.   Default %s' % self.update_dir)
        output_group.add_argument('--ncRNA-dir', dest="ncRNA_annotation_dir", help='Directory to keep the files of the ncRNA annotation step. Default %s' % self.ncRNA_annotation_dir)
        output_group.add_argument('--out-cmsearch', dest="out_cmsearch", help='Output file to keep the cmsearch results. Default %s' % self.out_cmsearch)
        output_group.add_argument('--out-tRNAscan', dest="out_tRNAscan", help='Output file to keep the tRNAscan-SE results. Default %s' % self.out_tRNAscan)

    def register_chunks(self, parser):
        """Register all parameters for making chunks
        with the given argparse parser

        parser -- the argparse parser
        """
        chunks_group = parser.add_argument_group('Chunks')
        chunks_group.add_argument('--masked-chunks', dest="masked_chunks", type=int, default=self.masked_chunks, help='Number of chunks of the masked genome for parallelizing some gene predictors run. Default %s' % self.masked_chunks)
       
        chunks_group.add_argument('--genome-chunks', dest="genome_chunks", type=int, default=self.genome_chunks, help='Number of chunks of the genome for parallelizing cmsearch. Default %s' % self.genome_chunks)
        chunks_group.add_argument('--protein-chunks', dest="protein_chunks", type=int, default=self.protein_chunks, help='Number of chunks to split the protein files for running blast and classify the lncRNAs.  Default %s' % self.protein_chunks)

    def register_augustus(self, parser):
        """Register all augustus parameters with given
        argparse parser

        parser -- the argparse parser
        """
        augustus_group = parser.add_argument_group('Augustus parameters')
        augustus_group.add_argument('--species', dest="aug_species", metavar="aug_species", help='Species name to run augustus with its trained parameters. For augustus and augustus with hints steps.')
        augustus_group.add_argument('--aug-alternatives-from-sampling', dest="aug_alternatives_from_sampling", default=self.aug_alternatives_from_sampling, choices=['true', 'false'], help='''Report alternative transcripts generated through probabilistic sampling. Default %s''' % str(self.aug_alternatives_from_sampling))
        augustus_group.add_argument('--aug-alternatives-from-evidence', dest="aug_alternatives_from_evidence", default=self.aug_alternatives_from_evidence, choices=['true', 'false'], help='''Report alternative transcripts when they are suggested by hints. Default %s''' % str(self.aug_alternatives_from_evidence))
        augustus_group.add_argument('--aug-uniqueGeneId', dest="aug_uniqueGeneId", default=self.aug_uniqueGeneId, choices = ['true', 'false'], help='''If true, output gene identifyers like this: seqname.gN. For augustus and augustus with hints. Default %s''' % str(self.aug_uniqueGeneId))
        augustus_group.add_argument('--aug-gff3', dest="aug_gff3", default=self.aug_gff3, choices = ['ON', 'OFF', 'on', 'off'], help='''Output in gff3 format. For augustus and augustus with hints. Default %s''' % str(self.aug_gff3))
        augustus_group.add_argument('--aug-sample', dest="aug_sample", type=int, default=self.aug_sample, help='''For augustus and augustus with hints. Default %s''' % str(self.aug_sample))
        augustus_group.add_argument('--aug-noInFrameStop', dest="aug_noInFrameStop", default=self.aug_noInFrameStop, choices = ['true', 'false'], help='''Do not report transcripts with in-frame stop codons. Otherwise, intron-spanning stop codons could occur. For augustus and augustus with hints. Default %s''' % str(self.aug_noInFrameStop))
        augustus_group.add_argument('--aug-maxtracks', dest="aug_maxtracks", type=int, default=self.aug_maxtracks, help='''Maximum number of tracks allowed. For augustus and augustus with hints. Default %s''' % str(self.aug_maxtracks))
        augustus_group.add_argument('--aug-singlestrand', dest="aug_singlestrand", default=self.aug_singlestrand, choices = ['true', 'false'], help='''Predict genes independently on each strand, allow overlapping genes on opposite strands. For augustus and augustus with hints. Default %s''' % str(self.aug_singlestrand))
        augustus_group.add_argument('--aug-strand', dest="aug_strand", default=self.aug_strand, choices=['both', 'forward', 'backward'], help='''For augustus and augustus with hints. Default %s''' % str(self.aug_strand))
        augustus_group.add_argument('--aug-min-intron-len', dest="aug_min_intron_len", type=int, default=self.aug_min_intron_len, help='''Minimum predicted intron length. For augustus and augustus with hints. Default %s''' % str(self.aug_min_intron_len))
        augustus_group.add_argument('--augustus-weights', dest="augustus_weights", nargs="+", type=int, default=self.augustus_weights, help='Weights given to augustus predictions when running EVM. Specify the weight for each EVM run separated by a space. Example 2 2 1')
        augustus_group.add_argument('--additional-augustus-options', dest="additional_augustus_options", help='Additional augustus options to run it, see augustus help for more information about the possible options.')
  

    def register_augustus_hints(self, parser):
        """Register all augustus with hints parameters with given
        argparse parser

        parser -- the argparse parser
        """
        augustus_hints_group = parser.add_argument_group('Augustus hints parameters')
        augustus_hints_group.add_argument('--extrinsic-file-augustus-hints', dest="extrinsic_file_augustus_hints", metavar="extrinsic_file_augustus_hints", default = self.extrinsic_file_augustus_hints, help='''Path to the Extrinsic file to use when running augustus with hints. Default %s''' % str(self.extrinsic_file_augustus_hints))
        augustus_hints_group.add_argument('--augustus-hints-weights', dest="augustus_hints_weights", nargs="+", type=int, default=self.augustus_hints_weights, help='Weights given to augustus with intron predictions when running EVM. Specify the weight for each EVM run separated by a space. Example 3 3 3 ')
        augustus_hints_group.add_argument('--additional-augustus-hints-options', dest="additional_augustus_hints_options", default=self.additional_augustus_hints_options, help='Desired augustus with intron options to run it, see augustus documentation for more information.''')

    def register_geneid(self, parser):
        """Register all geneid parameters with given
        argparse parser

        parser -- the argparse parser
        """
        geneid_group = parser.add_argument_group('Geneid parameters')
        geneid_group.add_argument('--geneid-path', dest="geneid_path", default=self.geneid_path, help='Path to the installation of geneid. Default %s''' % str(self.geneid_path))
        geneid_group.add_argument('--geneid-weights', dest="geneid_weights", nargs="+", type=int, default=self.geneid_weights, help='Weights given to geneid predictions when running EVM. Specify the weight for each EVM run separated by a space. Example 2 1 2 ')
        geneid_group.add_argument('--geneid-options', dest="geneid_options", default=self.geneid_options, help='Desired geneid options to run it, see geneid documentation for more information. Default %s''' % str(self.geneid_options))

    def register_geneid_introns(self, parser):
        """Register all geneid with introns parameters with given
        argparse parser

        parser -- the argparse parser
        """
        geneid_introns_group = parser.add_argument_group('Geneid Introns parameters')
        geneid_introns_group.add_argument('--geneid-introns-weights', dest="geneid_introns_weights", nargs="+", type=int, default=self.geneid_introns_weights, help='Weights given to geneid with intron predictions when running EVM. Specify the weight for each EVM run separated by a space. Example 3 3 3 ')
        geneid_introns_group.add_argument('--geneid-introns-options', dest="geneid_introns_options", default=self.geneid_introns_options, help='Desired geneid with intron options to run it, see geneid documentation for more information. Default %s''' % str(self.geneid_options))

    def register_genemark(self, parser):
        """Register all genemark parameters with given
        argparse parser

        parser -- the argparse parser
        """
        genemark_group = parser.add_argument_group('Genemark parameters')
        genemark_group.add_argument('--gmk-min-contig', dest="gmk_min_contig", type=int, default=self.gmk_min_contig, help='''Will ignore contigs shorter then min_contig in training. Default %s''' % str(self.gmk_min_contig))
        genemark_group.add_argument('--gmk-max-contig', dest="gmk_max_contig", type=int, default=self.gmk_max_contig, help='''Will split input genomic sequence into contigs shorter than max_contig. Default %s''' % str(self.gmk_max_contig))
        genemark_group.add_argument('--gmk-max-gap', dest="gmk_max_gap", type=int, default=self.gmk_max_gap, help='''Will split sequence at gaps longer than max_gap. Letters 'n' and 'N' are interpreted as standing within gaps. Default %s''' % str(self.gmk_max_gap))
        genemark_group.add_argument('--gmk-cores', dest="gmk_cores", type=int, default=self.gmk_cores, help='''Number of threads for running genemark. Default %s''' % str(self.gmk_cores))
        genemark_group.add_argument('--additional-genemark-options', dest="additional_genemark_options", help='Additional genemark options to run it, see genemark documentation for more information.')
        genemark_group.add_argument('--genemark-weights', dest="genemark_weights", nargs="+", type=int, default=self.genemark_weights, help='Weights given to genemark predictions when running EVM. Specify the weight for each EVM run separated by a space. Example  1 1 1 ') 

    def register_genemark_ET(self, parser):
        """Register all genemark-ET parameters with given
        argparse parser

        parser -- the argparse parser
        """
        genemark_ET_group = parser.add_argument_group('Genemark-ET parameters')
        genemark_ET_group.add_argument('--additional-genemark-ET-options', dest="additional_genemark_ET_options",help='Additional genemark-ET options to run it, see genemark documentation for more information.')
        genemark_ET_group.add_argument('--genemark-ET-weights', dest="genemark_ET_weights", nargs="+", type=int, default=self.genemark_ET_weights, help='Weights given to genemark-ET predictions when running EVM. Specify the weight for each EVM run separated by a space. Example  3 3 3 ')

    def register_miniprot(self, parser):
        """Register all miniprot parameters with given
        argparse parser

        parser -- the argparse parser
        """
        miniprot_group = parser.add_argument_group('Miniprot parameters')
        miniprot_group.add_argument('--miniprot-path', dest="miniprot_path", default = self.miniprot_path,  help='Path to Miniprot installation. Default %s' % self.miniprot_path)
        miniprot_group.add_argument('--miniprot-cores', dest="miniprot_cores", type=int, default = self.miniprot_cores, help='''Number of threads. Default %s''' % str(self.miniprot_cores))
        miniprot_group.add_argument('--miniprot-weights', dest="miniprot_weights", nargs="+", type=int, default=self.miniprot_weights, help='Weights given to miniprot mappings when running EVM. Specify the weight for each EVM run separated by a space. Example  10 8 10 ') 
        miniprot_group.add_argument('--additional-miniprot-options', dest="additional_miniprot_options", help='Additional miniprot options to run it, see miniprot help for more information about the possible options.')

    def register_pasa(self, parser):
        """Register all pasa parameters with given
        argparse parser

        parser -- the argparse parser
        """
        pasa_group = parser.add_argument_group('Pasa parameters')
        pasa_group.add_argument('--pasa-cores', dest="pasa_cores", type=int, default=self.pasa_cores, help='''Number of CPUs to run Pasa. Default %s''' % str(self.pasa_cores))
        pasa_group.add_argument('--pasadb', dest="pasadb", metavar="pasadb", help='Name of the pasa database, it must coincide with the name in pasa_config.')
        pasa_group.add_argument('--pasa-weights', dest="pasa_weights", nargs="+", type=int, default=self.pasa_weights, help='Weights given to pasa mappings when running EVM. Specify the weight for each EVM run separated by a space. Example  8 10 8 ')
        pasa_group.add_argument('--create-database', dest="create_database", action="store_true", help='If specified, create pasa database.')
        pasa_group.add_argument('--aligners', dest="aligners", default=self.aligners, help='Program to map the transcripts with.')
        pasa_group.add_argument('--add-pasa-option', dest="add_option",  default=self.add_option, help='Option given to add extra options to PASA')

    def register_transdecoder(self, parser):
        """Register all transdecoder parameters with given
        argparse parser

        parser -- the argparse parser
        """
        transdecoder_group = parser.add_argument_group('Transdecoder parameters')
        transdecoder_group.add_argument('--transdecoder-weights', dest="transdecoder_weights", nargs="+", type=int, default=self.transdecoder_weights, help='Weights given to pasa transdecodergff3 output file  when running EVM. Specify the weight for each EVM run separated by a space. Example 3 2 3')

    def register_evm(self, parser):
        """Register all evm parameters with given
        argparse parser

        parser -- the argparse parser
        """
        evm_group = parser.add_argument_group('Evm parameters')
        evm_group.add_argument('--evm-path', dest="evm_path", default = self.evm_path, help='Path to the EVM software installation. Default %s''' % str(self.evm_path))
        evm_group.add_argument('--evm-segmentsize', dest="evm_segmentsize", default = self.evm_segmentsize,type = int, help='Size of the genome partitions for EVM. Default %s''' % str(self.evm_segmentsize))
        evm_group.add_argument('--evm-overlapsize', dest="evm_overlapsize", default = self.evm_overlapsize, type=int, help='Size of the overlap between the different EVM partitions. Default %s''' % str(self.evm_overlapsize))
        evm_group.add_argument('--evm-cores', dest="evm_cores", default = self.evm_cores, type=int, help='Number of threads to run EVM. Default %s''' % str(self.evm_cores))
        evm_group.add_argument('--additional-evm-options', dest="additional_evm_options", help='Additional augusevmtus options to run it, see evm help for more information about the possible options.')

    def register_update(self, parser):
        """Register all PASA Update parameters with given
        argparse parser

        parser -- the argparse parser
        """
        update_group = parser.add_argument_group('Update parameters')
        update_group.add_argument('--project-name', dest="project_name", metavar="project_name", nargs=2, help='Name of the project and version of the annotation space separated, to give the names to the final annotation output.')
        update_group.add_argument('--update-rounds', dest="update_rounds", default = self.update_rounds, type=int, help='Number of rounds to run PASA updates. Default %s''' % str(self.update_rounds))

    def register_ncRNA_annotation(self, parser):
        """Register all ncRNA annotation parameters with given
        argparse parser

        parser -- the argparse parser
        """
        ncRNA_group = parser.add_argument_group('ncRNA Annotation parameters')
        ncRNA_group.add_argument('--ncRNA-version', dest="ncRNA_version", default = self.ncRNA_version, help='Version for the ncRNA annotation. Default %s''' % str(self.ncRNA_version))
        ncRNA_group.add_argument('--Rfam', dest="Rfam", default = self.Rfam, help='CM file with the Rfam library. Default %s''' % str(self.Rfam))
        ncRNA_group.add_argument('--cmsearch-CPUs', dest="cmsearch_CPUs", type=int, default = self.cmsearch_CPUs, help='''Number of CPUs to run cmsearch Defau
lt %s''' % str(self.cmsearch_CPUs))
        ncRNA_group.add_argument('--blast-threads', dest="blast_threads", type=int, default = self.blast_threads, help='''Number of CPUs to run blast Defau
lt %s''' % str(self.blast_threads))

####

    def check_parameters(self,args):
        """Check parameters consistency
            
        args -- set of parsed arguments"""

        if args.pipeline_workdir != None:
          args.pipeline_workdir = os.path.abspath(args.pipeline_workdir) + "/"
        else:
          args.pipeline_workdir = os.getcwd() + "/"

        if args.configFile != None:
          args.configFile = os.path.abspath(args.configFile)
        else:
          args.configFile = os.path.abspath(self.configFile)

        if args.specFile != None:
          args.specFile = os.path.abspath(args.specFile)
        else:
          args.specFile = os.path.abspath(self.specFile)    

        ##Checking inputs
        if args.scripts_dir:
          args.scripts_dir = os.path.abspath(args.scripts_dir) + "/"
        else:
          args.scripts_dir = os.path.abspath(self.scripts_dir) + "/"
        if not os.path.exists(args.scripts_dir):
          print (args.scripts_dir + " not found")

        if args.run_geneid or args.run_augustus  or args.run_genemark or args.run_genemark_ET or args.run_geneid_introns or args.run_augustus_hints:
          if args.genome_masked == None:
            print ("ERROR Sorry! No masked genome fasta file defined")
          else:
            args.genome_masked = os.path.abspath(args.genome_masked) 
            if not os.path.exists(args.genome_masked):
              print (args.genome_masked + " not found")

        if args.run_miniprot or args.run_pasa or args.run_transdecoder or args.run_EVM or args.run_update or args.run_non_coding:
          if args.genome == None:
            print ("ERROR Sorry! No genome fasta file defined")
          else:
            args.genome = os.path.abspath(args.genome) 
            if not os.path.exists(args.genome):
              print (args.genome + " not found")

        if args.base_name == None:
          if args.genome != None:
              args.base_name = os.path.splitext(os.path.basename(args.genome))[0]
          elif args.genome_masked != None:
              args.base_name = os.path.splitext(os.path.basename(args.genome_masked))[0]

        if args.run_genemark_ET or args.run_geneid_introns or args.run_augustus_hints:
          if args.junctions == None:
            print ("Sorry! No junctions gff file given.")
          else:
            args.junctions = os.path.abspath(args.junctions)
            if not os.path.exists(args.junctions):
              print (args.junctions + " not found") 
                        
        if args.run_geneid or args.run_geneid_introns:
          if args.geneid_parameters != None:
            args.geneid_parameters = os.path.abspath(args.geneid_parameters) 
            if not os.path.exists(args.geneid_parameters):
              print (args.geneid_parameters + " not found")
          else:
            print ("ERROR Geneid parameter file has not been specified")            

        if args.run_augustus or args.run_augustus_hints:
          if args.aug_species != None:
            args.aug_species = args.aug_species 
          else:
            print ("ERROR Augustus trained species has not been specified")

        if args.run_augustus_hints:
          args.extrinsic_file_augustus_hints = os.path.abspath(args.extrinsic_file_augustus_hints)
          if not os.path.exists(args.extrinsic_file_augustus_hints):
            print (args.extrinsic_file_augustus_hints +  " not found")  

        if args.run_miniprot == True: 
          if args.proteins != None:
            args.proteins = os.path.abspath(args.proteins) 
            if not os.path.exists(args.proteins):
              print (args.proteins + " not found")
          else:
            print ("ERROR Protein evidence file has not been specified")

        if args.run_pasa or args.run_transdecoder or args.run_update:
            if args.pasadb == None:
                print ("Sorry! No pasadb name given")

        if args.run_pasa == True:
          if args.transcripts != None:
            args.transcripts = os.path.abspath(args.transcripts) 
            if not os.path.exists(args.transcripts):
              print (args.transcripts + " not found")
          else:
             print ("ERROR Transcript evidence file has not been specified")

          if args.pasa_config == None:
            print ("ERROR No pasa configuration file found.")
          else:
            if not os.path.exists(args.pasa_config):
              print (args.pasa_config + " not found")
            else:
              args.pasa_config = os.path.abspath(args.pasa_config)

          if args.create_database:
            print ("WARNING: Remember to turn the create-database parameter to false if it's not the first time that you run PASA!")
          else:
            print ("WARNING: Remember to set the create-database parameter to true the first time you run PASA!")

          if args.trans_gtf != None:
            args.trans_gtf = os.path.abspath(args.trans_gtf) 
            if not os.path.exists(args.trans_gtf):
              print (args.trans_gtf + " not found")
          else:
            print ("WARNING:no transcripts gtf given, PASA will be run only with the given fasta file")

        if args.run_update:
          if args.update_config != None:
            args.update_config = os.path.abspath(args.update_config) 
            if not os.path.exists(args.update_config):
              print (args.update_config + " not found")
          else:
            print ("No annotCompare.config file given!")

          if args.project_name == None:
            print ("Sorry no project name and version have been given")

        if args.run_non_coding:
          if not os.path.exists(args.Rfam):
            print (args.Rfam + " doesn't exist")

        if args.RM_gff:
          if not os.path.exists(args.RM_gff):
            print (args.RM_gff) + " not found"
          else:
            args.RM_gff = os.path.abspath(args.RM_gff)

        if args.glen:
          if not os.path.exists(args.glen):
            print (args.glen) + " not found"
          else:
            args.glen = os.path.abspath(args.glen)

        ##Getting outputs:

        if args.output_dir:
            args.output_dir = os.path.abspath(args.output_dir) + "/"
        else:
            args.output_dir = args.pipeline_workdir + "step0" + str(args.annotation_step) + "_annotation_pipeline.V" + str(args.annotation_version)  + "/"

        if args.EVM_dir:
            args.EVM_dir = os.path.abspath(args.EVM_dir) + "/"
        else:
            args.EVM_dir = args.pipeline_workdir + "step0" + str(int(args.annotation_step) + 1) + "_EVM.V" + str(args.annotation_version)  + "/"

        if args.dir_masked_chunks:
            args.dir_masked_chunks =os.path.abspath(args.dir_masked_chunks) + "/"
        else:
            args.dir_masked_chunks = args.output_dir + "chunks_masked_reference/"

        if args.dir_genome_chunks:
            args.dir_genome_chunks = os.path.abspath(args.dir_genome_chunks) + "/"
        else:
            args.dir_genome_chunks = args.output_dir + "chunks_genome_reference/"

        if args.augustus_prediction:
            args.augustus_prediction = os.path.abspath(args.augustus_prediction)
        else:
            args.augustus_prediction = args.output_dir + "gene_predictions/augustus/augustus_gene_prediction.gff3"

        if args.augustus_preEVM:
            args.augustus_preEVM = os.path.abspath(args.augustus_preEVM)
        else:
            args.augustus_preEVM = args.output_dir + "gene_predictions/augustus/augustus_preEVM.gff3" 

        if args.augustus_hints_prediction:
            args.augustus_hints_prediction = os.path.abspath(args.augustus_hints_prediction)
        else:
            args.augustus_hints_prediction = args.output_dir + "gene_predictions/augustus_hints/augustus_hints_gene_prediction.gff3"

        if args.augustus_hints_preEVM:
            args.augustus_hints_preEVM = os.path.abspath(args.augustus_hints_preEVM)
        else:
            args.augustus_hints_preEVM = args.output_dir + "gene_predictions/augustus_hints/augustus_hints_preEVM.gff3" 

        if args.geneid_prediction:
            args.geneid_prediction = os.path.abspath(args.geneid_prediction)
        else: 
            args.geneid_prediction = args.output_dir + "gene_predictions/geneid/geneid_gene_prediction.gff3"

        if args.geneid_preEVM:
            args.geneid_preEVM = os.path.abspath(args.geneid_preEVM)
        else: 
            args.geneid_preEVM = args.output_dir + "gene_predictions/geneid/geneid_preEVM.gff3"

        if args.geneid_introns_prediction:
            args.geneid_introns_prediction = os.path.abspath(args.geneid_introns_prediction)
        else: 
            args.geneid_introns_prediction = args.output_dir + "gene_predictions/geneid_introns/geneid_introns_gene_prediction.gff3"

        if args.geneid_introns_preEVM:
            args.geneid_introns_preEVM = os.path.abspath(args.geneid_introns_preEVM)
        else: 
            args.geneid_introns_preEVM = args.output_dir + "gene_predictions/geneid_introns/geneid_introns_preEVM.gff3"

        if args.genemark_prediction:
            args.genemark_prediction = os.path.abspath(args.genemark_prediction)
        else:
            args.genemark_prediction = args.output_dir + "gene_predictions/genemark.gtf"

        if args.genemark_preEVM:
            args.genemark_preEVM = os.path.abspath(args.genemark_preEVM)
        else:
            args.genemark_preEVM = args.output_dir + "gene_predictions/genemark_preEVM.gff3"

        if args.genemark_ET_prediction:
            args.genemark_ET_prediction = os.path.abspath(args.genemark_ET_prediction)
        else:
            args.genemark_ET_prediction = args.output_dir + "gene_predictions/genemark-ET.gtf"

        if args.genemark_ET_preEVM:
            args.genemark_ET_preEVM = os.path.abspath(args.genemark_ET_preEVM)
        else:
            args.genemark_ET_preEVM = args.output_dir + "gene_predictions/genemark-ET_preEVM.gff3"

        if args.miniprot_cds:
            args.miniprot_cds = os.path.abspath(args.miniprot_cds)
        else: 
            args.miniprot_cds =  args.output_dir + "protein_and_transcript_mappings/miniprot/proteins_miniprot_cds.gff3" 

        if args.miniprot_gene:
            args.miniprot_gene = os.path.abspath(args.miniprot_gene)
        else: 
            args.miniprot_gene =  args.output_dir + "protein_and_transcript_mappings/miniprot/proteins_miniprot_gene.gff3" 

        if args.pasa_dir:
            args.pasa_dir = os.path.abspath(args.pasa_dir) + "/"
        else: 
            args.pasa_dir = args.output_dir + "protein_and_transcript_mappings/pasa/"

        if args.evm_out:
            args.evm_out = os.path.abspath(args.evm_out)
        else:
            args.evm_out = args.EVM_dir + "evm.best.gff3"

        if args.update_dir:
            args.update_dir = os.path.abspath(args.update_dir) + "/"
        else: 
            args.update_dir = args.pipeline_workdir + "step0" + str(int(args.annotation_step) + 2) + "_annotation_update.V" +str(args.annotation_version)  + "/" 

        if args.ncRNA_annotation_dir:
            args.ncRNA_annotation_dir = os.path.abspath(args.ncRNA_annotation_dir) + "/"
        else:
            args.ncRNA_annotation_dir = args.pipeline_workdir + "step0" + str(int(args.annotation_step) + 3) + "_ncRNA_annotation.V" + str(args.annotation_version)  + "/"

        if args.out_cmsearch:
            args.out_cmsearch = os.path.abspath(args.out_cmsearch)
        else:
            args.out_cmsearch = args.ncRNA_annotation_dir + "cmsearch.tbl"

        if args.out_tRNAscan:
            args.out_tRNAscan = os.path.abspath(args.out_tRNAscan)
        else:
            args.out_tRNAscan = args.ncRNA_annotation_dir + "tRNAscan-SE/tRNAscan.out"

        ##Getting other options

        if args.evm_path:
            args.evm_path = os.path.abspath(args.evm_path) + "/"

    def storeGeneralParameters(self,args):
        """Updates general parameters to the map of parameters to be store in a JSON file

        args -- set of parsed arguments
        """
        self.generalParameters["configFile"] = args.configFile
        self.generalParameters["specFile"] = args.specFile
        self.generalParameters["base_name"] = args.base_name
        self.generalParameters["run_geneid"] = args.run_geneid
        self.generalParameters["run_geneid_introns"] = args.run_geneid_introns
        self.generalParameters["run_augustus"] = args.run_augustus
        self.generalParameters["run_augustus_hints"] = args.run_augustus_hints
        self.generalParameters["run_genemark"] = args.run_genemark
        self.generalParameters["run_genemark-ET"] = args.run_genemark_ET
        self.generalParameters["run_miniprot"] = args.run_miniprot
        self.generalParameters["run_pasa"] = args.run_pasa
        self.generalParameters["run_transdecoder"] = args.run_transdecoder
        self.generalParameters["run_EVM"] = args.run_EVM
        self.generalParameters["run_update"] = args.run_update
        self.generalParameters["run_non_coding"] = args.run_non_coding
        self.generalParameters["get_JBrowse"] = args.get_Jbrowse
        self.allParameters  ["Parameters"] = self.generalParameters

    def storeallSpecParameters(self,args):
        """Updates rule all cluster spec parameters to the map of parameters to be store in a JSON file

        args -- set of parsed arguments
        """
        self.allSpecParameters["name"] = "{rule}_{base}_annotation_pipeline"
        self.allSpecParameters["qos"] = self.all_qos
        self.allSpecParameters["time"] = self.all_time
        self.allSpecParameters["queue"] = self.all_queue
        self.allParameters ["all"] = self.allSpecParameters

    def storeInputParameters(self,args):
        """Updates input parameters to the map of parameters to be store in a JSON file

        args -- set of parsed arguments
        """
        self.inputParameters["scripts_dir"] = args.scripts_dir        
        self.inputParameters["genome"] = args.genome
        self.inputParameters["genome_masked"] = args.genome_masked
        self.inputParameters["junctions"] = args.junctions
        self.inputParameters["geneid_parameters"] = args.geneid_parameters
        self.inputParameters["proteins"] = args.proteins
        self.inputParameters["transcripts"] = args.transcripts
        self.inputParameters["pasa_config"] = args.pasa_config
        self.inputParameters["trans_gtf"] = args.trans_gtf
        self.inputParameters["update_config"] = args.update_config
        self.inputParameters["genome_lengths"] = args.glen
        self.inputParameters["RM_gff"] = args.RM_gff
        self.allParameters ["Inputs"] = self.inputParameters

    def storeOutputParameters(self,args):
        """Updates output parameters to the map of parameters to be store in a JSON file

        args -- set of parsed arguments
        """

        self.outputParameters["annotation_step"] = args.annotation_step
        self.outputParameters["annotation_version"] = args.annotation_version
        self.outputParameters["base_dir"] = args.pipeline_workdir
        self.outputParameters["output_dir"] = args.output_dir

        self.outputParameters["EVM_dir"] = args.EVM_dir
        self.outputParameters ["dir_masked_chunks"] = args.dir_masked_chunks
        self.outputParameters ["dir_genome_chunks"] = args.dir_genome_chunks
        self.outputParameters["augustus_prediction"] = args.augustus_prediction
        self.outputParameters["augustus_preEVM"] = args.augustus_preEVM
        self.outputParameters["augustus_hints_prediction"] = args.augustus_hints_prediction
        self.outputParameters["augustus_hints_preEVM"] = args.augustus_hints_preEVM
        self.outputParameters["geneid_prediction"] = args.geneid_prediction
        self.outputParameters["geneid_preEVM"] = args.geneid_preEVM
        self.outputParameters["geneid_introns_prediction"] = args.geneid_introns_prediction
        self.outputParameters["geneid_introns_preEVM"] = args.geneid_introns_preEVM
        self.outputParameters["genemark_prediction"] = args.genemark_prediction
        self.outputParameters["genemark_preEVM"] = args.genemark_preEVM
        self.outputParameters["genemark_ET_prediction"] = args.genemark_ET_prediction
        self.outputParameters["genemark_ET_preEVM"] = args.genemark_ET_preEVM
        self.outputParameters["miniprot_cds"] = args.miniprot_cds
        self.outputParameters["miniprot_gene"] = args.miniprot_gene
        self.outputParameters["pasa_dir"] = args.pasa_dir
        self.outputParameters["evm_out"] = args.evm_out
        self.outputParameters["update_dir"] = args.update_dir
        self.outputParameters["ncRNA_annotation_dir"] = args.ncRNA_annotation_dir
        self.outputParameters["out_cmsearch"] = args.out_cmsearch
        self.outputParameters["out_tRNAscan"] = args.out_tRNAscan
        self.allParameters["Outputs"] = self.outputParameters

    def storeChunksParameters(self,args):
        """Updates chunks parameters to the map of parameters to be store in a JSON file

        args -- set of parsed arguments
        """

        self.chunksParameters["masked_chunks"] = args.masked_chunks
        self.chunksParameters["genome_chunks"] = args.genome_chunks
        self.chunksParameters["protein_chunks"] = args.protein_chunks
        self.allParameters["Chunks"] = self.chunksParameters

    def storechunksSpecParameters(self,args):
        """Updates get_chunks_fasta cluster spec parameters to the map of parameters to be store in a JSON file

        args -- set of parsed arguments
        """
        self.chunksSpecParameters["name"] = "{rule}_{base}_{input.fasta}"
        self.chunksSpecParameters["qos"] = self.chunks_qos
        self.chunksSpecParameters["time"] = self.chunks_time
        self.chunksSpecParameters["queue"] = self.chunks_queue
        self.chunksSpecParameters["mem"] = self.chunks_mem
        self.allParameters ["get_chunks_fasta"] = self.chunksSpecParameters

    def storecodingHintsSpecParameters(self,args):
        """Updates get_coding_hints cluster spec parameters to the map of parameters to be store in a JSON file

        args -- set of parsed arguments
        """
        self.codingHintsSpecParameters["name"] = "{rule}_{base}"
        self.codingHintsSpecParameters["qos"] = self.codingHints_qos
        self.codingHintsSpecParameters["time"] = self.codingHints_time
        self.codingHintsSpecParameters["queue"] = self.codingHints_queue
        self.codingHintsSpecParameters["mem"] = self.codingHints_mem
        self.allParameters ["get_coding_junctions"] = self.codingHintsSpecParameters

    def storeAugustusParameters(self,args):
        """Updates augustus parameters to the map of parameters to be store in a JSON file

        args -- set of parsed arguments
        """
        self.augustusParameters["aug_species"] = args.aug_species
        self.augustusParameters["aug_alternatives_from_sampling"] = args.aug_alternatives_from_sampling
        self.augustusParameters["aug_alternatives_from_evidence"] = args.aug_alternatives_from_evidence
        self.augustusParameters["aug_uniqueGeneId"] = args.aug_uniqueGeneId
        self.augustusParameters["aug_gff3"] = args.aug_gff3
        self.augustusParameters["aug_sample"] = args.aug_sample
        self.augustusParameters["aug_noInFrameStop"] = args.aug_noInFrameStop
        self.augustusParameters["aug_maxtracks"] = args.aug_maxtracks
        self.augustusParameters["aug_singlestrand"] = args.aug_singlestrand
        self.augustusParameters["aug_strand"] = args.aug_strand
        self.augustusParameters["aug_min_intron_len"] = args.aug_min_intron_len
        self.augustusParameters["augustus_weights"] = args.augustus_weights
        self.augustusParameters["additional_augustus_options"] = args.additional_augustus_options
        self.allParameters ["augustus"] = self.augustusParameters

    def storeAugustusSpecParameters(self,args):
        """Updates augustus cluster spec parameters to the map of parameters to be store in a JSON file

        args -- set of parsed arguments
        """
        self.augustusSpecParameters["name"] = "{rule}_{base}"
        self.augustusSpecParameters["qos"] = self.augustus_qos
        self.augustusSpecParameters["time"] = self.augustus_time
        self.augustusSpecParameters["queue"] = self.augustus_queue
        self.augustusSpecParameters["mem"] = self.augustus_mem
        self.allParameters ["augustus"] = self.augustusSpecParameters

    def storeAugustusArraySpecParameters(self,args):
        """Updates augustus cluster spec parameters to the map of parameters to be store in a JSON file

        args -- set of parsed arguments
        """
        self.augustusArraySpecParameters["name"] = "{rule}_{base}"
        self.augustusArraySpecParameters["qos"] = self.augustus_qos
        self.augustusArraySpecParameters["time"] = self.augustus_time
        self.augustusArraySpecParameters["queue"] = self.augustus_queue
        self.augustusArraySpecParameters["mem"] = self.augustus_mem
        self.augustusArraySpecParameters["array"] = "1-{masked_chunks}%15"
        self.allParameters ["augustus_jobarray"] = self.augustusArraySpecParameters

    def storeAugustusHintsParameters(self,args):
        """Updates augustus with introns parameters to the map of parameters to be store in a JSON file

        args -- set of parsed arguments
        """
        self.augustusHintsParameters["extrinsic_file_augustus_hints"] = args.extrinsic_file_augustus_hints
        self.augustusHintsParameters["augustus_hints_weights"] = args.augustus_hints_weights
        self.augustusHintsParameters["additional_augustus_hints_options"] = args.additional_augustus_hints_options       
        self.allParameters ["augustus_hints"] = self.augustusHintsParameters

    def storeAugustusHintsSpecParameters(self,args):
        """Updates augustus with hintscluster spec parameters to the map of parameters to be store in a JSON file

        args -- set of parsed arguments
        """
        self.augustusHintsSpecParameters["name"] = "{rule}_{base}"
        self.augustusHintsSpecParameters["qos"] = self.augustus_hints_qos
        self.augustusHintsSpecParameters["time"] = self.augustus_hints_time
        self.augustusHintsSpecParameters["queue"] = self.augustus_hints_queue
        self.augustusHintsSpecParameters["mem"] = self.augustus_hints_mem
        self.allParameters ["augustus_hints"] = self.augustusHintsSpecParameters

    def storeAugustusHintsArraySpecParameters(self,args):
        """Updates augustus with hints cluster spec parameters to the map of parameters to be store in a JSON file

        args -- set of parsed arguments
        """
        self.augustusHintsArraySpecParameters["name"] = "{rule}_{base}"
        self.augustusHintsArraySpecParameters["qos"] = self.augustus_hints_qos
        self.augustusHintsArraySpecParameters["time"] = self.augustus_hints_time
        self.augustusHintsArraySpecParameters["queue"] = self.augustus_hints_queue
        self.augustusHintsArraySpecParameters["mem"] = self.augustus_hints_mem
        self.augustusHintsArraySpecParameters["array"] = "1-{masked_chunks}%15"
        self.allParameters ["augustus_hints_jobarray"] = self.augustusHintsArraySpecParameters

    def storeGeneidParameters(self,args):
        """Updates geneid parameters to the map of parameters to be store in a JSON file

        args -- set of parsed arguments
        """
        self.geneidParameters["geneid_path"] = args.geneid_path
        self.geneidParameters["geneid_weights"] = args.geneid_weights
        self.geneidParameters["geneid_options"] = args.geneid_options       
        self.allParameters ["geneid"] = self.geneidParameters

    def storeGeneidSpecParameters(self,args):
        """Updates geneid cluster spec parameters to the map of parameters to be store in a JSON file

        args -- set of parsed arguments
        """
        self.geneidSpecParameters["name"] = "{rule}_{base}"
        self.geneidSpecParameters["qos"] = self.geneid_qos
        self.geneidSpecParameters["time"] = self.geneid_time
        self.geneidSpecParameters["queue"] = self.geneid_queue
        self.geneidSpecParameters["mem"] = self.geneid_mem
        self.allParameters ["geneid"] = self.geneidSpecParameters

    def storeGeneidArraySpecParameters(self,args):
        """Updates geneid cluster spec parameters to the map of parameters to be store in a JSON file

        args -- set of parsed arguments
        """
        self.geneidArraySpecParameters["name"] = "{rule}_{base}"
        self.geneidArraySpecParameters["qos"] = self.geneid_qos
        self.geneidArraySpecParameters["time"] = self.geneid_time
        self.geneidArraySpecParameters["queue"] = self.geneid_queue
        self.geneidArraySpecParameters["mem"] = self.geneid_mem
        self.geneidArraySpecParameters["array"] = "1-{masked_chunks}%5"
        self.allParameters ["geneid_jobarray"] = self.geneidArraySpecParameters

    def storeGeneidIntronsParameters(self,args):
        """Updates geneid with introns parameters to the map of parameters to be store in a JSON file

        args -- set of parsed arguments
        """
        self.geneidIntronsParameters["geneid_introns_weights"] = args.geneid_introns_weights
        self.geneidIntronsParameters["geneid_introns_options"] = args.geneid_introns_options       
        self.allParameters ["geneid_introns"] = self.geneidIntronsParameters

    def storeGeneidIntronsSpecParameters(self,args):
        """Updates geneid introns cluster spec parameters to the map of parameters to be store in a JSON file

        args -- set of parsed arguments
        """
        self.geneidIntronsSpecParameters["name"] = "{rule}_{base}"
        self.geneidIntronsSpecParameters["qos"] = self.geneid_introns_qos
        self.geneidIntronsSpecParameters["time"] = self.geneid_introns_time
        self.geneidIntronsSpecParameters["queue"] = self.geneid_introns_queue
        self.geneidIntronsSpecParameters["mem"] = self.geneid_introns_mem
        self.allParameters ["geneid_introns"] = self.geneidIntronsSpecParameters

    def storeGeneidIntronsArraySpecParameters(self,args):
        """Updates geneid introns cluster spec parameters to the map of parameters to be store in a JSON file

        args -- set of parsed arguments
        """
        self.geneidIntronsArraySpecParameters["name"] = "{rule}_{base}"
        self.geneidIntronsArraySpecParameters["qos"] = self.geneid_introns_qos
        self.geneidIntronsArraySpecParameters["time"] = self.geneid_introns_time
        self.geneidIntronsArraySpecParameters["queue"] = self.geneid_introns_queue
        self.geneidIntronsArraySpecParameters["mem"] = self.geneid_introns_mem
        self.geneidIntronsArraySpecParameters["array"] = "1-{masked_chunks}%5"
        self.allParameters ["geneid_introns_jobarray"] = self.geneidIntronsArraySpecParameters


    def storeGenemarkParameters(self,args):
        """Updates genemark parameters to the map of parameters to be store in a JSON file

        args -- set of parsed arguments
        """
        self.genemarkParameters["gmk_max_contig"] = args.gmk_max_contig
        self.genemarkParameters["gmk_min_contig"] = args.gmk_min_contig
        self.genemarkParameters["gmk_max_gap"] = args.gmk_max_gap
        self.genemarkParameters["gmk_cores"] = args.gmk_cores
        self.genemarkParameters["genemark_weights"] = args.genemark_weights
        self.genemarkParameters["additional_genemark_options"] = args.additional_genemark_options   
        self.allParameters ["genemark"] = self.genemarkParameters

    def storeGenemarkSpecParameters(self,args):
        """Updates genemark cluster spec parameters to the map of parameters to be store in a JSON file

        args -- set of parsed arguments
        """
        self.genemarkSpecParameters["name"] = "{rule}_{base}"
        self.genemarkSpecParameters["qos"] = self.genemark_qos
        self.genemarkSpecParameters["time"] = self.genemark_time
        self.genemarkSpecParameters["queue"] = self.genemark_queue
        self.genemarkSpecParameters["mem"] = self.genemark_mem
        self.allParameters ["genemark"] = self.genemarkSpecParameters

    def storeGenemarkETParameters(self,args):
        """Updates genemark parameters to the map of parameters to be store in a JSON file

        args -- set of parsed arguments
        """
        self.genemarkETParameters["genemark_ET_weights"] = args.genemark_ET_weights
        self.genemarkETParameters["additional_genemark_ET_options"] = args.additional_genemark_ET_options 
        self.allParameters ["genemark-ET"] = self.genemarkETParameters

    def storeGenemarkETSpecParameters(self,args):
        """Updates genemark-ET cluster spec parameters to the map of parameters to be store in a JSON file

        args -- set of parsed arguments
        """
        self.genemarkETSpecParameters["name"] = "{rule}_{base}"
        self.genemarkETSpecParameters["qos"] = self.genemark_et_qos
        self.genemarkETSpecParameters["time"] = self.genemark_et_time
        self.genemarkETSpecParameters["queue"] = self.genemark_et_queue
        self.genemarkETSpecParameters["mem"] = self.genemark_et_mem
        self.allParameters ["genemark_ET"] = self.genemarkETSpecParameters

    def storeMiniprotParameters(self,args):
        """Updates miniprot parameters to the map of parameters to be store in a JSON file

        args -- set of parsed arguments
        """
        self.miniprotParameters["miniprot_path"] = args.miniprot_path
        self.miniprotParameters["miniprot_cores"] = args.miniprot_cores
        self.miniprotParameters["miniprot_weights"] = args.miniprot_weights
        self.miniprotParameters["additional_miniprot_options"] = args.additional_miniprot_options      
        self.allParameters ["miniprot"] = self.miniprotParameters

    def storeMiniprotSpecParameters(self,args):
        """Updates Miniprot cluster spec parameters to the map of parameters to be store in a JSON file

        args -- set of parsed arguments
        """
        self.miniprotSpecParameters["name"] = "{rule}_{base}"
        self.miniprotSpecParameters["qos"] = self.miniprot_qos
        self.miniprotSpecParameters["time"] = self.miniprot_time
        self.miniprotSpecParameters["queue"] = self.miniprot_queue
        self.miniprotSpecParameters["mem"] = self.miniprot_mem
        self.allParameters ["miniprot"] = self.miniprotSpecParameters

    def storePasaParameters(self,args):
        """Updates pasa parameters to the map of parameters to be store in a JSON file

        args -- set of parsed arguments
        """
        self.pasaParameters["pasa_cores"] = args.pasa_cores
        self.pasaParameters["create_database"] = args.create_database
        self.pasaParameters["pasadb"] = args.pasadb
        self.pasaParameters["pasa_weights"] = args.pasa_weights
        self.pasaParameters["aligners"] = args.aligners
        self.pasaParameters["add_option"] = args.add_option
        self.allParameters["pasa"] = self.pasaParameters

    def storePasaSpecParameters(self,args):
        """Updates PASA cluster spec parameters to the map of parameters to be store in a JSON file

        args -- set of parsed arguments
        """
        self.pasaSpecParameters["name"] = "{rule}_{base}"
        self.pasaSpecParameters["qos"] = self.PASA_qos
        self.pasaSpecParameters["time"] = self.PASA_time
        self.pasaSpecParameters["queue"] = self.PASA_queue
        self.pasaSpecParameters["mem"] = self.PASA_mem
        self.allParameters ["pasa"] = self.pasaSpecParameters

    def storeTransdecoderParameters(self,args):
        """Updates transdecoder parameters to the map of parameters to be store in a JSON file

        args -- set of parsed arguments
        """
        self.transdecoderParameters["transdecoder_weights"] = args.transdecoder_weights
        self.allParameters["transdecoder"] = self.transdecoderParameters

    def storeTransdecoderSpecParameters(self,args):
        """Updates transdecoder cluster spec parameters to the map of parameters to be store in a JSON file

        args -- set of parsed arguments
        """
        self.transdecoderSpecParameters["name"] = "{rule}_{base}"
        self.transdecoderSpecParameters["qos"] = self.transdecoder_qos
        self.transdecoderSpecParameters["time"] = self.transdecoder_time
        self.transdecoderSpecParameters["queue"] = self.transdecoder_queue
        self.transdecoderSpecParameters["mem"] = self.transdecoder_mem
        self.allParameters ["Transdecoder"] = self.transdecoderSpecParameters

    def storemergegffSpecParameters(self,args):
        """Updates merge_gffs cluster spec parameters to the map of parameters to be store in a JSON file

        args -- set of parsed arguments
        """
        self.mergegffSpecParameters["name"] = "{rule}_{base}_{wildcards.name}"
        self.mergegffSpecParameters["qos"] = self.mergegff_qos
        self.mergegffSpecParameters["time"] = self.mergegff_time
        self.mergegffSpecParameters["queue"] = self.mergegff_queue
        self.mergegffSpecParameters["mem"] = self.mergegff_mem
        self.allParameters ["merge_gffs"] = self.mergegffSpecParameters

    def storepred4evmSpecParameters(self,args):
        """Updates predictions4EVM cluster spec parameters to the map of parameters to be store in a JSON file

        args -- set of parsed arguments
        """
        self.pred4evmSpecParameters["name"] = "{rule}_{base}_{wildcards.name}"
        self.pred4evmSpecParameters["qos"] = self.pred4evm_qos
        self.pred4evmSpecParameters["time"] = self.pred4evm_time
        self.pred4evmSpecParameters["queue"] = self.pred4evm_queue
        self.pred4evmSpecParameters["mem"] = self.pred4evm_mem
        self.allParameters ["predictions4EVM"] = self.pred4evmSpecParameters

    def storeprepevmSpecParameters(self,args):
        """Updates prepare EVM cluster spec parameters to the map of parameters to be store in a JSON file

        args -- set of parsed arguments
        """
        self.prepevmSpecParameters["name"] = "{rule}_{base}"
        self.prepevmSpecParameters["qos"] = self.prepevm_qos
        self.prepevmSpecParameters["time"] = self.prepevm_time
        self.prepevmSpecParameters["queue"] = self.prepevm_queue
        self.prepevmSpecParameters["mem"] = self.prepevm_mem
        self.allParameters ["prepare_evm"] = self.prepevmSpecParameters

    def storeevmSpecParameters(self,args):
        """Updates EVM cluster spec parameters to the map of parameters to be store in a JSON file

        args -- set of parsed arguments
        """
        self.evmSpecParameters["name"] = "{rule}_{base}_{wildcards.w}"
        self.evmSpecParameters["qos"] = self.evm_qos
        self.evmSpecParameters["time"] = self.evm_time
        self.evmSpecParameters["queue"] = self.evm_queue
        self.evmSpecParameters["mem"] = self.evm_mem
        self.allParameters ["EVM"] = self.evmSpecParameters

    def storeselectevmSpecParameters(self,args):
        """Updates select EVM cluster spec parameters to the map of parameters to be store in a JSON file

        args -- set of parsed arguments
        """
        self.selectevmSpecParameters["name"] = "{rule}_{base}"
        self.selectevmSpecParameters["qos"] = self.selectevm_qos
        self.selectevmSpecParameters["time"] = self.selectevm_time
        self.selectevmSpecParameters["queue"] = self.selectevm_queue
        self.selectevmSpecParameters["mem"] = self.selectevm_mem
        self.allParameters ["select_EVM"] = self.selectevmSpecParameters

    def storeEvmParameters(self,args):
        """Updates evm parameters to the map of parameters to be store in a JSON file

        args -- set of parsed arguments
        """
        self.evmParameters["evm_path"] = args.evm_path
        self.evmParameters["evm_segmentsize"] = args.evm_segmentsize
        self.evmParameters["evm_overlapsize"] = args.evm_overlapsize
        self.evmParameters["evm_cores"] = args.evm_cores
        self.evmParameters["additional_evm_options"] = args.additional_evm_options
        self.allParameters["EVM"] = self.evmParameters

    def storeUpdateParameters(self,args):
        """Updates PASA update parameters to the map of parameters to be store in a JSON file

        args -- set of parsed arguments
        """
        self.updateParameters["project_name"] = args.project_name
        self.updateParameters["update_rounds"] = args.update_rounds
        self.allParameters["update"] = self.updateParameters


    def storepasaupdateSpecParameters(self,args):
        """Updates PASA update cluster spec parameters to the map of parameters to be store in a JSON file

        args -- set of parsed arguments
        """
        self.pasaupdateSpecParameters["name"] = "{rule}_{wildcards.round}_{base}"
        self.pasaupdateSpecParameters["qos"] = self.pasaupdate_qos
        self.pasaupdateSpecParameters["time"] = self.pasaupdate_time
        self.pasaupdateSpecParameters["queue"] = self.pasaupdate_queue
        self.pasaupdateSpecParameters["mem"] = self.pasaupdate_mem
        self.allParameters ["PASA_update"] = self.pasaupdateSpecParameters

    def storeprocessupdateSpecParameters(self,args):
        """Updates process update cluster spec parameters to the map of parameters to be store in a JSON file

        args -- set of parsed arguments
        """
        self.processupdateSpecParameters["name"] = "{rule}_{base}_{params.project}{params.version}"
        self.processupdateSpecParameters["qos"] = self.processupdate_qos
        self.processupdateSpecParameters["time"] = self.processupdate_time
        self.processupdateSpecParameters["queue"] = self.processupdate_queue
        self.processupdateSpecParameters["mem"] = self.processupdate_mem
        self.allParameters ["process_update"] = self.processupdateSpecParameters

    def storencRNAannotationParameters(self,args):
        """Updates ncRNA Annotation parameters to the map of parameters to be store in a JSON file

        args -- set of parsed arguments
        """
        self.ncRNAannotationParameters["ncRNA_version"] = args.ncRNA_version
        self.ncRNAannotationParameters["cmsearch_CPUs"] = args.cmsearch_CPUs
        self.ncRNAannotationParameters["Rfam"] = args.Rfam
        self.ncRNAannotationParameters["blast_threads"] = args.blast_threads
        self.allParameters["ncRNA_annotation"] = self.ncRNAannotationParameters

    def storecmsearchSpecParameters(self,args):
        """Updates cmsearch cluster spec parameters to the map of parameters to be store in a JSON file

        args -- set of parsed arguments
        """
        self.cmsearchSpecParameters["name"] = "{rule}_{base}"
        self.cmsearchSpecParameters["qos"] = self.cmsearch_qos
        self.cmsearchSpecParameters["time"] = self.cmsearch_time
        self.cmsearchSpecParameters["queue"] = self.cmsearch_queue
        self.cmsearchSpecParameters["mem"] = self.cmsearch_mem
        self.allParameters ["cmsearch"] = self.cmsearchSpecParameters


    def storetRNAscanSpecParameters(self,args):
        """Updates tRNAscan cluster spec parameters to the map of parameters to be store in a JSON file

        args -- set of parsed arguments
        """
        self.tRNAscanSpecParameters["name"] = "{rule}_{base}"
        self.tRNAscanSpecParameters["qos"] = self.tRNAscan_qos
        self.tRNAscanSpecParameters["time"] = self.tRNAscan_time
        self.tRNAscanSpecParameters["queue"] = self.tRNAscan_queue
        self.tRNAscanSpecParameters["mem"] = self.tRNAscan_mem
        self.allParameters ["tRNAscan"] = self.tRNAscanSpecParameters


    def storelncRNASpecParameters(self,args):
        """Updates lncRNA cluster spec parameters to the map of parameters to be store in a JSON file

        args -- set of parsed arguments
        """
        self.lncRNASpecParameters["name"] = "{rule}_{base}"
        self.lncRNASpecParameters["qos"] = self.lncRNA_qos
        self.lncRNASpecParameters["time"] = self.lncRNA_time
        self.lncRNASpecParameters["queue"] = self.lncRNA_queue
        self.lncRNASpecParameters["mem"] = self.lncRNA_mem
        self.allParameters ["lncRNAannotation"] = self.lncRNASpecParameters

    def storeBlastProtSpecParameters(self,args):
        """Updates BLAST prot cluster spec parameters to the map of parameters to be store in a JSON file

        args -- set of parsed arguments
        """
        self.BlastProtSpecParameters["name"] = "{rule}_{base}_{wildcards.dirs}{wildcards.i}"
        self.BlastProtSpecParameters["qos"] = self.blast_prot_qos
        self.BlastProtSpecParameters["time"] = self.blast_prot_time
        self.BlastProtSpecParameters["queue"] = self.blast_prot_queue
        self.BlastProtSpecParameters["mem"] = self.blast_prot_mem
        self.allParameters ["Blast_prot"] = self.BlastProtSpecParameters


    def storencRNASpecParameters(self,args):
        """Updates ncRNA cluster spec parameters to the map of parameters to be store in a JSON file

        args -- set of parsed arguments
        """
        self.ncRNASpecParameters["name"] = "{rule}_{base}"
        self.ncRNASpecParameters["qos"] = self.ncRNA_qos
        self.ncRNASpecParameters["time"] = self.ncRNA_time
        self.ncRNASpecParameters["queue"] = self.ncRNA_queue
        self.ncRNASpecParameters["mem"] = self.ncRNA_mem
        self.allParameters ["ncAnnotation"] = self.ncRNASpecParameters

    def storegetGCSpecParameters(self,args):
        """Updates getGC for jbrowse track cluster spec parameters to the map of parameters to be store in a JSON file

        args -- set of parsed arguments
        """
        self.getGCSpecParameters["name"] = "{rule}_{base}"
        self.getGCSpecParameters["qos"] = self.getGC_qos
        self.getGCSpecParameters["time"] = self.getGC_time
        self.getGCSpecParameters["queue"] = self.getGC_queue
        self.getGCSpecParameters["mem"] = self.getGC_mem
        self.allParameters ["get_GCcontent"] = self.getGCSpecParameters

    def storegetseqSpecParameters(self,args):
        """Updates browse seq for jbrowse track cluster spec parameters to the map of parameters to be store in a JSON file

        args -- set of parsed arguments
        """
        self.getseqSpecParameters["name"] = "{rule}_{base}"
        self.getseqSpecParameters["qos"] = self.getseq_qos
        self.getseqSpecParameters["time"] = self.getseq_time
        self.getseqSpecParameters["queue"] = self.getseq_queue
        self.getseqSpecParameters["mem"] = self.getseq_mem
        self.allParameters ["browse_seq"] = self.getseqSpecParameters

    def storegettracksSpecParameters(self,args):
        """Updates browse tracks for jbrowse track cluster spec parameters to the map of parameters to be store in a JSON file

        args -- set of parsed arguments
        """
        self.gettracksSpecParameters["name"] = "{rule}_{base}"
        self.gettracksSpecParameters["qos"] = self.gettracks_qos
        self.gettracksSpecParameters["time"] = self.gettracks_time
        self.gettracksSpecParameters["queue"] = self.gettracks_queue
        self.gettracksSpecParameters["mem"] = self.gettracks_mem
        self.allParameters ["browse_tracks"] = self.gettracksSpecParameters

    def storegettarSpecParameters(self,args):
        """Updates get tar for jbrowse track cluster spec parameters to the map of parameters to be store in a JSON file

        args -- set of parsed arguments
        """
        self.gettarSpecParameters["name"] = "{rule}_{base}"
        self.gettarSpecParameters["qos"] = self.gettar_qos
        self.gettarSpecParameters["time"] = self.gettar_time
        self.gettarSpecParameters["queue"] = self.gettar_queue
        self.gettarSpecParameters["mem"] = self.gettar_mem
        self.allParameters ["get_tar"] = self.gettarSpecParameters

#####

#1.Create object class Configuration File
configManager = CreateConfigurationFile()
specManager = CreateConfigurationFile()

#2.Create object for argument parsinng
parser = argparse.ArgumentParser(prog="create_configuration_file",
                description="Create a configuration json file for the repeat annotation pipeline."
                )     

#2.1 Updates arguments and parsing
configManager.register_parameter(parser)

args = parser.parse_args()

#2.2 Check Parameters
configManager.check_parameters(args)

#3. store arguments to super map structure
configManager.storeGeneralParameters(args)
configManager.storeInputParameters(args)
configManager.storeOutputParameters(args)
configManager.storeChunksParameters(args)
configManager.storeAugustusParameters(args)
configManager.storeAugustusHintsParameters(args)
configManager.storeGeneidParameters(args)
configManager.storeGeneidIntronsParameters(args)
configManager.storeGenemarkParameters(args)
configManager.storeGenemarkETParameters(args)
configManager.storeMiniprotParameters(args)
configManager.storePasaParameters(args)
configManager.storeTransdecoderParameters(args)
configManager.storeEvmParameters(args)
configManager.storeUpdateParameters(args)
configManager.storencRNAannotationParameters(args)

specManager.storeallSpecParameters(args)
specManager.storechunksSpecParameters(args)
specManager.storecodingHintsSpecParameters(args)
if args.run_augustus:
  if args.masked_chunks > 1:   
    specManager.storeAugustusArraySpecParameters(args)
  else:
    specManager.storeAugustusSpecParameters(args)

if args.run_augustus_hints:
  if args.masked_chunks > 1:   
    specManager.storeAugustusHintsArraySpecParameters(args)
  else:
    specManager.storeAugustusHintsSpecParameters(args)

if args.run_geneid:
  specManager.storeGeneidSpecParameters(args)

if args.run_geneid_introns:
  specManager.storeGeneidIntronsSpecParameters(args)

if args.run_genemark:
  specManager.storeGenemarkSpecParameters(args)

if args.run_genemark_ET:
  specManager.storeGenemarkETSpecParameters(args)

if args.run_pasa:
  specManager.storePasaSpecParameters(args)

if args.run_transdecoder:
  specManager.storeTransdecoderSpecParameters(args)

if args.run_miniprot:
  specManager.storeMiniprotSpecParameters(args)

specManager.storemergegffSpecParameters(args)
specManager.storepred4evmSpecParameters(args)
specManager.storeprepevmSpecParameters(args)

if args.run_EVM:  
  specManager.storeevmSpecParameters(args)
  specManager.storeselectevmSpecParameters(args)

if args.run_update:  
  specManager.storepasaupdateSpecParameters(args)
  specManager.storeprocessupdateSpecParameters(args)

if args.run_non_coding:  
  specManager.storecmsearchSpecParameters(args)
  specManager.storetRNAscanSpecParameters(args)
  specManager.storelncRNASpecParameters(args)  
  specManager.storeBlastProtSpecParameters(args)
  specManager.storencRNASpecParameters(args)

if args.get_Jbrowse:
  specManager.storegetGCSpecParameters(args)
  specManager.storegetseqSpecParameters(args)
  specManager.storegettracksSpecParameters(args)
  specManager.storegettarSpecParameters(args)
###

#4. Store JSON file
with open(args.configFile, 'w') as of:
    json.dump(configManager.allParameters, of, indent=2)
with open(args.specFile, 'w') as of:
    json.dump(specManager.allParameters, of, indent=2)
